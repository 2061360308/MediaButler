"""
Handler per comandi Telegram con menu interattivo inline
"""
import sys
import asyncio
from telethon import TelegramClient, events, Button
from core.auth import AuthManager
from core.space_manager import SpaceManager
from core.downloader import DownloadManager
from core.config import get_config
from utils.helpers import human_readable_size, FileHelpers


class CommandHandlers:
    """Gestione comandi bot con menu interattivo"""
    
    def __init__(
        self,
            client: TelegramClient,
        auth_manager: AuthManager,
        space_manager: SpaceManager,
        download_manager: DownloadManager
    ):
        self.client = client
        self.auth = auth_manager
        self.space = space_manager
        self.downloads = download_manager
        self.config = get_config()
        self.logger = self.config.logger
    
    def register(self):
        """Registra tutti gli handler comandi"""
        # Comandi principali
        self.client.on(events.NewMessage(pattern='/start'))(self.start_handler)
        self.client.on(events.NewMessage(pattern='/menu'))(self.menu_handler)
        self.client.on(events.NewMessage(pattern='/status'))(self.status_handler)
        self.client.on(events.NewMessage(pattern='/space'))(self.space_handler)
        self.client.on(events.NewMessage(pattern='/downloads'))(self.downloads_handler)
        self.client.on(events.NewMessage(pattern='/waiting'))(self.waiting_handler)
        self.client.on(events.NewMessage(pattern='/cancel_all'))(self.cancel_all_handler)
        self.client.on(events.NewMessage(pattern='/cancel'))(self.cancel_handler)
        self.client.on(events.NewMessage(pattern='/stop'))(self.stop_handler)
        self.client.on(events.NewMessage(pattern='/users'))(self.users_handler)
        self.client.on(events.NewMessage(pattern='/help'))(self.help_handler)
        self.client.on(events.NewMessage(pattern='/settings'))(self.settings_handler)
        self.client.on(events.NewMessage(pattern='/subtitles'))(self.subtitles_handler)
        self.client.on(events.NewMessage(pattern='/sub_toggle'))(self.subtitle_toggle_handler)
        self.client.on(events.NewMessage(pattern='/sub_auto'))(self.subtitle_auto_handler)

        # Callback handler per bottoni
        self.client.on(events.CallbackQuery(pattern='menu_'))(self.menu_callback_handler)
        self.client.on(events.CallbackQuery(pattern='cancel_'))(self.cancel_callback_handler)
        self.client.on(events.CallbackQuery(pattern='stop_'))(self.stop_callback_handler)
        self.client.on(events.CallbackQuery(pattern='sub_'))(self.subtitle_callback_handler)
        
        self.logger.info("Handler comandi registrati con menu inline")
    
    def _create_main_menu(self, is_admin: bool = False):
        """Crea menu principale con bottoni inline"""
        buttons = [
            [
                Button.inline("üìä Stato", "menu_status"),
                Button.inline("üíæ Spazio", "menu_space"),
                Button.inline("üì• Downloads", "menu_downloads")
            ],
            [
                Button.inline("‚è≥ In Attesa", "menu_waiting"),
                Button.inline("üìù Sottotitoli", "menu_subtitles"),
                Button.inline("‚öôÔ∏è Impostazioni", "menu_settings")
            ],
            [
                Button.inline("‚ùì Aiuto", "menu_help"),
                Button.inline("‚ùå Cancella Tutto", "menu_cancel_all")
            ]
        ]
        
        if is_admin:
            buttons.append([
                Button.inline("üë• Utenti", "menu_users"),
                Button.inline("üõë Stop Bot", "menu_stop")
            ])
        
        return buttons
    
    def _create_quick_menu(self):
        """Crea menu rapido con azioni principali"""
        return [
            [
                Button.inline("üìä Stato", "menu_status"),
                Button.inline("üì• Downloads", "menu_downloads")
            ],
            [
                Button.inline("üì± Menu Completo", "menu_full")
            ]
        ]
    
    async def start_handler(self, event: events.NewMessage.Event):
        """Handler /start"""
        if not await self.auth.check_authorized(event):
            return
        
        user = await event.get_sender()
        self.logger.info(f"/start da {user.username} (ID: {user.id})")
        
        is_admin = self.auth.is_admin(user.id)
        
        # Messaggio di benvenuto
        welcome_text = self._format_welcome_message(user.id, is_admin)
        
        # Invia con menu inline
        await event.reply(
            welcome_text,
            buttons=self._create_main_menu(is_admin),
            link_preview=False
        )
    
    async def menu_handler(self, event: events.NewMessage.Event):
        """Handler /menu"""
        if not await self.auth.check_authorized(event):
            return
        
        is_admin = self.auth.is_admin(event.sender_id)
        
        await event.reply(
            "üé¨ **MediaButler - Menu Principale**\n\n"
            "Seleziona un'opzione:",
            buttons=self._create_main_menu(is_admin)
        )
    
    async def status_handler(self, event: events.NewMessage.Event):
        """Handler /status"""
        if not await self.auth.check_authorized(event):
            return
        
        status_text = self._get_status_text()
        
        buttons = [
            [
                Button.inline("üîÑ Aggiorna", "menu_status"),
                Button.inline("üì± Menu", "menu_back")
            ]
        ]
        
        await event.reply(status_text, buttons=buttons)
    
    async def space_handler(self, event: events.NewMessage.Event):
        """Handler /space"""
        if not await self.auth.check_authorized(event):
            return
        
        space_text = self.space.format_disk_status()
        
        buttons = [
            [
                Button.inline("üîÑ Aggiorna", "menu_space"),
                Button.inline("üì± Menu", "menu_back")
            ]
        ]
        
        await event.reply(space_text, buttons=buttons)
    
    async def downloads_handler(self, event: events.NewMessage.Event):
        """Handler /downloads"""
        if not await self.auth.check_authorized(event):
            return
        
        downloads_text = self._get_downloads_detailed()
        
        buttons = [
            [
                Button.inline("üîÑ Aggiorna", "menu_downloads"),
                Button.inline("‚ùå Cancella Tutti", "menu_cancel_all")
            ],
            [Button.inline("üì± Menu", "menu_back")]
        ]
        
        await event.reply(downloads_text, buttons=buttons)
    
    async def waiting_handler(self, event: events.NewMessage.Event):
        """Handler /waiting"""
        if not await self.auth.check_authorized(event):
            return
        
        waiting_text = self._get_waiting_text()
        
        buttons = [
            [
                Button.inline("üîÑ Aggiorna", "menu_waiting"),
                Button.inline("üì± Menu", "menu_back")
            ]
        ]
        
        await event.reply(waiting_text, buttons=buttons)
    
    async def cancel_handler(self, event: events.NewMessage.Event):
        """Handler /cancel"""
        if not await self.auth.check_authorized(event):
            return
        
        active = self.downloads.get_active_downloads()
        
        if not active:
            await event.reply(
                "üì≠ **Nessun download attivo da cancellare**",
                buttons=[[Button.inline("üì± Menu", "menu_back")]]
            )
            return
        
        text = "**‚ùå Seleziona download da cancellare:**\n\n"
        buttons = []
        
        for idx, info in enumerate(active, 1):
            filename_short = info.filename[:30] + "..." if len(info.filename) > 30 else info.filename
            text += f"{idx}. `{filename_short}`\n"
            text += f"   {info.progress:.1f}% - {info.size_gb:.1f} GB\n\n"
            
            buttons.append([
                Button.inline(f"‚ùå Cancella #{idx}", f"cancel_{info.message_id}")
            ])
        
        buttons.append([
            Button.inline("‚ùå Cancella Tutti", "menu_cancel_all"),
            Button.inline("üì± Menu", "menu_back")
        ])
        
        await event.reply(text, buttons=buttons)
    
    async def cancel_all_handler(self, event: events.NewMessage.Event):
        """Handler /cancel_all"""
        if not await self.auth.check_authorized(event):
            return
        
        active = len(self.downloads.get_active_downloads())
        queued = self.downloads.get_queued_count()
        waiting = self.downloads.get_space_waiting_count()
        total = active + queued + waiting
        
        if total == 0:
            await event.reply(
                "‚úÖ **Nessun download da cancellare**",
                buttons=[[Button.inline("üì± Menu", "menu_back")]]
            )
            return
        
        buttons = [
            [
                Button.inline("‚úÖ Conferma", "cancel_confirm"),
                Button.inline("‚ùå Annulla", "menu_back")
            ]
        ]
        
        await event.reply(
            f"‚ö†Ô∏è **Conferma cancellazione**\n\n"
            f"Stai per cancellare:\n"
            f"‚Ä¢ Download attivi: {active}\n"
            f"‚Ä¢ In coda: {queued}\n"
            f"‚Ä¢ In attesa: {waiting}\n\n"
            f"**Totale: {total} operazioni**\n\n"
            f"Confermi?",
            buttons=buttons
        )
    
    async def settings_handler(self, event: events.NewMessage.Event):
        """Handler /settings"""
        if not await self.auth.check_authorized(event):
            return
        
        settings_text = self._get_settings_text()
        
        buttons = [[Button.inline("üì± Menu", "menu_back")]]
        
        await event.reply(settings_text, buttons=buttons)
    
    async def help_handler(self, event: events.NewMessage.Event):
        """Handler /help"""
        if not await self.auth.check_authorized(event):
            return
        
        help_text = self._get_help_text()
        
        await event.reply(
            help_text,
            buttons=self._create_quick_menu()
        )
    
    async def users_handler(self, event: events.NewMessage.Event):
        """Handler /users (admin)"""
        if not await self.auth.check_authorized(event):
            return
        
        if not await self.auth.require_admin(event):
            return
        
        users_text = self._get_users_text()
        
        buttons = [[Button.inline("üì± Menu", "menu_back")]]
        
        await event.reply(users_text, buttons=buttons)
    
    async def stop_handler(self, event: events.NewMessage.Event):
        """Handler /stop (admin)"""
        if not await self.auth.check_authorized(event):
            return
        
        if not await self.auth.require_admin(event):
            return
        
        buttons = [
            [
                Button.inline("‚úÖ Conferma Arresto", "stop_confirm"),
                Button.inline("‚ùå Annulla", "menu_back")
            ]
        ]
        
        await event.reply(
            "üõë **Conferma Arresto Bot**\n\n"
            "‚ö†Ô∏è Questa azione:\n"
            "‚Ä¢ Canceller√† tutti i download\n"
            "‚Ä¢ Fermer√† il bot\n"
            "‚Ä¢ Richieder√† riavvio manuale\n\n"
            "Confermi?",
            buttons=buttons
        )
    
    async def menu_callback_handler(self, event: events.CallbackQuery.Event):
        """Handler per callback menu"""
        if not await self.auth.check_callback_authorized(event):
            return
        
        action = event.data.decode('utf-8').replace('menu_', '')
        
        # Menu navigation
        if action == 'back' or action == 'full':
            is_admin = self.auth.is_admin(event.sender_id)
            await event.edit(
                "üé¨ **MediaButler - Menu Principale**\n\n"
                "Seleziona un'opzione:",
                buttons=self._create_main_menu(is_admin)
            )
        elif action == 'refresh':
            is_admin = self.auth.is_admin(event.sender_id)
            await event.edit(
                "üé¨ **MediaButler - Menu Principale**\n\n"
                "Seleziona un'opzione:",
                buttons=self._create_main_menu(is_admin)
            )
            await event.answer("‚úÖ Menu aggiornato")
        else:
            await self._handle_menu_action(event, action)
    
    async def cancel_callback_handler(self, event: events.CallbackQuery.Event):
        """Handler per cancellazioni"""
        data = event.data.decode('utf-8')
        
        if data == 'cancel_confirm':
            total_cancelled = self.downloads.cancel_all_downloads()
            
            await event.edit(
                f"‚úÖ **Cancellazione Completata**\n\n"
                f"Sono state cancellate {total_cancelled} operazioni.",
                buttons=[[Button.inline("üì± Menu", "menu_back")]]
            )
        else:
            # Cancella singolo download
            msg_id = int(data.replace('cancel_', ''))
            if self.downloads.cancel_download(msg_id):
                await event.answer("‚úÖ Download cancellato")
                
                # Aggiorna lista
                downloads_text = self._get_downloads_detailed()
                buttons = [
                    [
                        Button.inline("üîÑ Aggiorna", "menu_downloads"),
                        Button.inline("üì± Menu", "menu_back")
                    ]
                ]
                
                await event.edit(downloads_text, buttons=buttons)
            else:
                await event.answer("‚ùå Download non trovato", alert=True)
    
    async def stop_callback_handler(self, event: events.CallbackQuery.Event):
        """Handler per stop bot"""
        if event.data.decode('utf-8') == 'stop_confirm':
            if not self.auth.is_admin(event.sender_id):
                await event.answer("‚ùå Solo amministratori", alert=True)
                return
            
            await event.edit("üõë **Arresto in corso...**")
            
            self.logger.info("Arresto richiesto dall'amministratore")
            self.downloads.cancel_all_downloads()
            
            await asyncio.sleep(2)
            await self.client.disconnect()
            sys.exit(0)
    
    async def _handle_menu_action(self, event, action: str):
        """Gestisce azioni menu"""
        content_map = {
            'status': self._get_status_text,
            'space': self.space.format_disk_status,
            'downloads': self._get_downloads_detailed,
            'waiting': self._get_waiting_text,
            'subtitles': self._get_subtitle_status,
            'settings': self._get_settings_text,
            'help': self._get_help_text,
            'users': self._get_users_text,
            'cancel_all': self._get_cancel_confirmation
        }
        
        if action in content_map:
            content = content_map[action]()
            
            buttons = []
            
            # Bottoni specifici per ogni azione
            if action in ['status', 'space', 'downloads', 'waiting']:
                buttons.append([
                    Button.inline("üîÑ Aggiorna", f"menu_{action}"),
                    Button.inline("üì± Menu", "menu_back")
                ])
            elif action == 'subtitles':
                buttons = self._create_subtitle_menu()
            elif action == 'cancel_all':
                buttons = [
                    [
                        Button.inline("‚úÖ Conferma", "cancel_confirm"),
                        Button.inline("‚ùå Annulla", "menu_back")
                    ]
                ]
            elif action == 'users':
                if not self.auth.is_admin(event.sender_id):
                    await event.answer("‚ùå Solo amministratori", alert=True)
                    return
                buttons = [[Button.inline("üì± Menu", "menu_back")]]
            elif action == 'stop':
                if not self.auth.is_admin(event.sender_id):
                    await event.answer("‚ùå Solo amministratori", alert=True)
                    return
                buttons = [
                    [
                        Button.inline("‚úÖ Conferma Arresto", "stop_confirm"),
                        Button.inline("‚ùå Annulla", "menu_back")
                    ]
                ]
                content = "üõë **Conferma Arresto Bot**\n\n‚ö†Ô∏è Questa azione:\n‚Ä¢ Canceller√† tutti i download\n‚Ä¢ Fermer√† il bot\n‚Ä¢ Richieder√† riavvio manuale\n\nConfermi?"
            else:
                buttons = [[Button.inline("üì± Menu", "menu_back")]]
            
            await event.edit(content, buttons=buttons)
    
    # Funzioni helper per generare contenuti
    def _format_welcome_message(self, user_id: int, is_admin: bool) -> str:
        """Messaggio di benvenuto formattato"""
        disk_usage = self.space.get_all_disk_usage()
        total_free = sum(usage.free_gb for usage in disk_usage.values())
        
        active = len(self.downloads.get_active_downloads())
        queued = self.downloads.get_queued_count()
        
        tmdb_emoji = "üéØ" if self.config.tmdb.is_enabled else "‚ö†Ô∏è"
        tmdb_status = "TMDB Attivo" if self.config.tmdb.is_enabled else "TMDB Non configurato"
        
        role = "üëë Amministratore" if is_admin else "üë§ Utente"
        
        # Lista comandi per accesso rapido
        commands_list = (
            "**üìù Comandi rapidi:**\n"
            "`/status` - Stato sistema\n"
            "`/downloads` - Download attivi\n"
            "`/space` - Spazio disco\n"
            "`/menu` - Menu completo\n"
            "`/help` - Aiuto"
        )
        
        if is_admin:
            commands_list += "\n`/users` - Gestione utenti\n`/stop` - Arresta bot"
        
        return (
            f"üé¨ **MediaButler - Organizzatore Media**\n\n"
            f"Benvenuto! {role}\n"
            f"ID: `{user_id}`\n\n"
            f"**üìä Stato Sistema:**\n"
            f"‚Ä¢ üíæ Spazio: {total_free:.1f} GB liberi\n"
            f"‚Ä¢ üì• Attivi: {active} download\n"
            f"‚Ä¢ ‚è≥ In coda: {queued} file\n"
            f"‚Ä¢ {tmdb_emoji} {tmdb_status}\n\n"
            f"**üì§ Per iniziare:** Invia un file video\n\n"
            f"{commands_list}\n\n"
            f"**üí° Usa il menu sotto per navigare facilmente!**"
        )
    
    def _get_status_text(self) -> str:
        """Genera testo stato sistema"""
        status_text = "üìä **Stato Sistema**\n\n"
        
        active = self.downloads.get_active_downloads()
        if active:
            status_text += f"**üì• Download attivi ({len(active)}):**\n"
            for info in active[:5]:
                status_text += f"‚Ä¢ `{info.filename[:30]}{'...' if len(info.filename) > 30 else ''}`\n"
                if info.progress > 0:
                    status_text += f"  {info.progress:.1f}% - {info.speed_mbps:.1f} MB/s\n"
            if len(active) > 5:
                status_text += f"  ...e altri {len(active) - 5}\n"
            status_text += "\n"
        else:
            status_text += "üì≠ Nessun download attivo\n\n"
        
        queue_count = self.downloads.get_queued_count()
        space_waiting = self.downloads.get_space_waiting_count()
        
        if queue_count > 0:
            status_text += f"‚è≥ **In coda:** {queue_count} file\n"
        if space_waiting > 0:
            status_text += f"‚è∏Ô∏è **In attesa spazio:** {space_waiting} file\n"
        
        status_text += "\nüíæ **Spazio:**\n"
        disk_usage = self.space.get_all_disk_usage()
        
        for name, usage in disk_usage.items():
            status_text += f"{usage.status_emoji} {name.capitalize()}: {usage.free_gb:.1f} GB liberi\n"
        
        return status_text
    
    def _get_downloads_detailed(self) -> str:
        """Dettagli download attivi"""
        active = self.downloads.get_active_downloads()
        
        if not active:
            return (
                "üì≠ **Nessun download attivo**\n\n"
                "Invia un file video per iniziare."
            )
        
        text = f"üì• **Download Attivi ({len(active)})**\n\n"
        
        for idx, info in enumerate(active, 1):
            text += f"**{idx}. {info.filename[:35]}{'...' if len(info.filename) > 35 else ''}**\n"
            text += f"üìè {info.size_gb:.1f} GB | "
            text += f"üë§ User {info.user_id}\n"
            
            if info.progress > 0:
                filled = int(info.progress / 10)
                bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
                text += f"`[{bar}]` {info.progress:.1f}%\n"
                
                if info.speed_mbps > 0:
                    text += f"‚ö° {info.speed_mbps:.1f} MB/s"
                
                if info.eta_seconds:
                    eta_min = info.eta_seconds // 60
                    text += f" | ‚è± {eta_min}m rimanenti"
                
                text += "\n"
            
            text += "\n"
        
        return text
    
    def _get_waiting_text(self) -> str:
        """Testo file in attesa"""
        waiting_count = self.downloads.get_space_waiting_count()
        
        if waiting_count == 0:
            return (
                "‚úÖ **Nessun file in attesa**\n\n"
                "Tutti i download hanno spazio sufficiente."
            )
        
        text = f"‚è≥ **File in attesa di spazio ({waiting_count})**\n\n"
        
        for idx, item in enumerate(self.downloads.space_waiting_queue[:10], 1):
            info = item.download_info
            text += f"**{idx}.** `{info.filename[:35]}{'...' if len(info.filename) > 35 else ''}`\n"
            text += f"    üìè {info.size_gb:.1f} GB | üìÇ {info.media_type.value}\n"
        
        if waiting_count > 10:
            text += f"\n...e altri {waiting_count - 10} file"
        
        return text
    
    def _get_settings_text(self) -> str:
        """Testo impostazioni"""
        tmdb_status = "‚úÖ Attivo" if self.config.tmdb.is_enabled else "‚ùå Non configurato"
        
        return (
            "‚öôÔ∏è **Impostazioni Correnti**\n\n"
            f"**Download:**\n"
            f"‚Ä¢ Simultanei: {self.config.limits.max_concurrent_downloads}\n"
            f"‚Ä¢ Max dimensione: {self.config.limits.max_file_size_gb} GB\n\n"
            f"**Spazio:**\n"
            f"‚Ä¢ Minimo riservato: {self.config.limits.min_free_space_gb} GB\n"
            f"‚Ä¢ Soglia avviso: {self.config.limits.warning_threshold_gb} GB\n"
            f"‚Ä¢ Controllo ogni: {self.config.limits.space_check_interval}s\n\n"
            f"**TMDB:**\n"
            f"‚Ä¢ Stato: {tmdb_status}\n"
            f"‚Ä¢ Lingua: {self.config.tmdb.language}\n\n"
            f"**Percorsi:**\n"
            f"‚Ä¢ Film: `{self.config.paths.movies}`\n"
            f"‚Ä¢ Serie: `{self.config.paths.tv}`\n"
            f"‚Ä¢ Temp: `{self.config.paths.temp}`\n\n"
            f"‚ÑπÔ∏è Modifica `.env` per cambiare."
        )
    
    def _get_help_text(self) -> str:
        """Testo aiuto"""
        return (
            "‚ùì **Guida MediaButler**\n\n"
            "**üì• Come usare:**\n"
            "1Ô∏è‚É£ Invia un file video\n"
            "2Ô∏è‚É£ Il bot riconosce il contenuto\n"
            "3Ô∏è‚É£ Conferma o scegli tipo\n"
            "4Ô∏è‚É£ Download automatico\n\n"
            "**üìù Comandi principali:**\n"
            "‚Ä¢ `/menu` - Menu interattivo\n"
            "‚Ä¢ `/status` - Stato rapido\n"
            "‚Ä¢ `/downloads` - Download attivi\n"
            "‚Ä¢ `/space` - Spazio disco\n"
            "‚Ä¢ `/cancel` - Cancella download\n"
            "‚Ä¢ `/help` - Questo aiuto\n\n"
            "**üìÅ Organizzazione:**\n"
            "‚Ä¢ Film: `/movies/Nome (Anno)/`\n"
            "‚Ä¢ Serie: `/tv/Serie/Season XX/`\n\n"
            "**üí° Suggerimenti:**\n"
            "‚Ä¢ Nomi descrittivi = migliori risultati\n"
            "‚Ä¢ Max 10GB per file\n"
            "‚Ä¢ I download riprendono dopo riavvio\n\n"
            "Per assistenza, contatta l'admin."
        )
    
    def _get_users_text(self) -> str:
        """Testo gestione utenti"""
        users = self.auth.get_authorized_users()
        admin_id = self.auth.get_admin_id()
        
        text = f"üë• **Utenti Autorizzati ({len(users)})**\n\n"
        
        for idx, user_id in enumerate(users, 1):
            is_admin = " üëë Admin" if user_id == admin_id else ""
            text += f"**{idx}.** `{user_id}`{is_admin}\n"
        
        text += (
            "\nüìù **Per modificare:**\n"
            "1. Modifica `AUTHORIZED_USERS` in `.env`\n"
            "2. Riavvia il bot\n\n"
            "Il primo utente √® sempre admin."
        )
        
        return text
    
    def _get_cancel_confirmation(self) -> str:
        """Testo conferma cancellazione"""
        active = len(self.downloads.get_active_downloads())
        queued = self.downloads.get_queued_count()
        waiting = self.downloads.get_space_waiting_count()
        total = active + queued + waiting
        
        if total == 0:
            return "‚úÖ **Nessun download da cancellare**"
        
        return (
            f"‚ö†Ô∏è **Conferma Cancellazione**\n\n"
            f"Stai per cancellare:\n"
            f"‚Ä¢ Download attivi: {active}\n"
            f"‚Ä¢ In coda: {queued}\n"
            f"‚Ä¢ In attesa: {waiting}\n\n"
            f"**Totale: {total} operazioni**\n\n"
            f"Sei sicuro?"
        )

    async def subtitles_handler(self, event):
        """Handler comando /subtitles"""
        if not await self.auth.check_authorized(event):
            return

        await event.reply(
            self._get_subtitle_status(),
            buttons=self._create_subtitle_menu()
        )

    async def subtitle_toggle_handler(self, event):
        """Handler comando /sub_toggle - abilita/disabilita sottotitoli"""
        if not await self.auth.check_authorized(event):
            return

        await event.reply(
            "‚öôÔ∏è **Configurazione Sottotitoli**\n\n"
            "Per modificare le impostazioni sottotitoli, aggiorna il file .env:\n\n"
            "‚Ä¢ `SUBTITLE_ENABLED=true/false`\n"
            "‚Ä¢ `SUBTITLE_AUTO_DOWNLOAD=true/false`\n"
            "‚Ä¢ `SUBTITLE_LANGUAGES=it,en`\n\n"
            "Riavvia il bot per applicare le modifiche."
        )

    async def subtitle_auto_handler(self, event):
        """Handler comando /sub_auto - toggle download automatico"""
        if not await self.auth.check_authorized(event):
            return

        await event.reply(
            "‚öôÔ∏è **Download Automatico Sottotitoli**\n\n"
            "Per abilitare/disabilitare il download automatico, "
            "modifica `SUBTITLE_AUTO_DOWNLOAD=true/false` nel file .env\n\n"
            "Riavvia il bot per applicare le modifiche."
        )

    async def subtitle_callback_handler(self, event):
        """Handler callback bottoni sottotitoli"""
        if not await self.auth.check_authorized(event):
            await event.answer("‚ùå Non autorizzato")
            return

        try:
            data = event.data.decode('utf-8')

            if data == "sub_status":
                await event.edit(
                    self._get_subtitle_status(),
                    buttons=self._create_subtitle_menu()
                )

            elif data == "sub_config":
                await event.edit(
                    "‚öôÔ∏è **Configurazione Sottotitoli**\n\n"
                    "Per modificare le impostazioni, edita il file .env:\n\n"
                    "‚Ä¢ `SUBTITLE_ENABLED=true/false`\n"
                    "‚Ä¢ `SUBTITLE_AUTO_DOWNLOAD=true/false`\n"
                    "‚Ä¢ `SUBTITLE_LANGUAGES=it,en,es`\n"
                    "‚Ä¢ `OPENSUBTITLES_USERNAME=username`\n"
                    "‚Ä¢ `OPENSUBTITLES_PASSWORD=password`\n\n"
                    "Riavvia il bot per applicare le modifiche.",
                    buttons=[[Button.inline("üîô Indietro", "sub_status")]]
                )

            elif data == "sub_back_main":
                user_id = event.sender_id
                is_admin = self.auth.is_admin(user_id)
                await event.edit(
                    "üé¨ **MediaButler - Menu Principale**\n\n"
                    "Seleziona un'opzione:",
                    buttons=self._create_main_menu(is_admin)
                )

            await event.answer()

        except Exception as e:
            self.logger.error(f"Errore callback sottotitoli: {e}")
            await event.answer("‚ùå Errore")

    def _get_subtitle_status(self) -> str:
        """Ottieni stato sistema sottotitoli"""
        config = self.config.subtitles

        status_icon = "‚úÖ" if config.enabled else "‚ùå"
        auto_icon = "‚úÖ" if config.auto_download else "‚ùå"
        auth_icon = "‚úÖ" if config.is_opensubtitles_configured else "‚ùå"

        return (
            f"üìù **Stato Sottotitoli**\n\n"
            f"{status_icon} Sistema attivo: **{'S√¨' if config.enabled else 'No'}**\n"
            f"{auto_icon} Download automatico: **{'S√¨' if config.auto_download else 'No'}**\n"
            f"üåç Lingue: **{', '.join(config.languages)}**\n"
            f"{auth_icon} OpenSubtitles configurato: **{'S√¨' if config.is_opensubtitles_configured else 'No'}**\n"
            f"üìÑ Formato preferito: **{config.preferred_format}**\n\n"
            f"User Agent: `{config.opensubtitles_user_agent}`"
        )

    def _create_subtitle_menu(self):
        """Crea menu sottotitoli"""
        return [
            [
                Button.inline("üîÑ Aggiorna", "sub_status"),
                Button.inline("‚öôÔ∏è Configurazione", "sub_config")
            ],
            [
                Button.inline("üîô Menu Principale", "sub_back_main")
            ]
        ]
    